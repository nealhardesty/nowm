#!/usr/bin/env python3

import logging
import sys
import os
import argparse

from Xlib import X, display, XK

# xlib reference: https://tronche.com/gui/x/xlib
# python-xlib: https://pypi.org/project/python-xlib
# python-xlib docs: https://python-xlib.github.io

class NoWM():
  """NoWM - The 'No Window Manager" window manager

  This is a pathologically simple python window manager.  No frills.
  """

  # How much to resize or move a window in free move
  MOVE_RESIZE_PIXELS=10

  #TERMINAL = ["/usr/bin/x-terminal-emulator"]
  TERMINAL = ["xterm", "-rv", "-ls"]
  BROWSER = ["xdg-open", "https://"]


  # mod1 = alt, mod4 = super
  MODIFIER = X.ControlMask | X.Mod1Mask | X.ShiftMask
  MODIFIER2 = X.ControlMask | X.Mod4Mask | X.ShiftMask
  #MODIFIER = X.ControlMask | X.Mod1Mask

  KEYPRESS_HANDLERS = [
    (MODIFIER, XK.XK_BackSpace, 'exit_wm'),
    (MODIFIER, XK.XK_equal, 'restart_wm'),
    (MODIFIER, XK.XK_Left, 'handle_left'),
    (MODIFIER, XK.XK_h, 'handle_left'),
    (MODIFIER, XK.XK_Right, 'handle_right'),
    (MODIFIER, XK.XK_l, 'handle_right'),
    (MODIFIER, XK.XK_Return, 'handle_return'),
    (MODIFIER, XK.XK_Up, 'handle_up'),
    (MODIFIER, XK.XK_Down, 'handle_down'),
    (MODIFIER, XK.XK_u, 'handle_topleft'),
    (MODIFIER, XK.XK_i, 'handle_topright'),
    (MODIFIER, XK.XK_j, 'handle_bottomleft'),
    (MODIFIER, XK.XK_k, 'handle_bottomright'),
    (MODIFIER, XK.XK_t, 'handle_terminal'),
    (MODIFIER, XK.XK_r, 'handle_browser'),
    (MODIFIER, XK.XK_y, 'handle_xeyes'),
    (X.Mod1Mask, XK.XK_Tab, 'handle_alttab'),
    (X.Mod1Mask | X.ShiftMask, XK.XK_Tab, 'handle_alttab'),
    (MODIFIER, XK.XK_w, 'handle_wasd_up'),
    (MODIFIER, XK.XK_a, 'handle_wasd_left'),
    (MODIFIER, XK.XK_s, 'handle_wasd_down'),
    (MODIFIER, XK.XK_d, 'handle_wasd_right'),
    (MODIFIER2, XK.XK_w, 'handle_wasd_up'),
    (MODIFIER2, XK.XK_a, 'handle_wasd_left'),
    (MODIFIER2, XK.XK_s, 'handle_wasd_down'),
    (MODIFIER2, XK.XK_d, 'handle_wasd_right'),
    (MODIFIER, XK.XK_x, 'handle_kill_window'),
  ]

  KEYRELEASE_HANDLERS = [
  ]


  def __init__(self):
    self.display = display.Display()
    self.screen = self.display.screen()

    self.windows = {}
    self.window_order = []
    self.cycle_window_index = 0
    self.scan_windows()

    self.last_keysym = None

    self.keypress_handlers = {}
    self.keyrelease_handlers = {}

    self.configure_root_events()
    self.configure_key_handlers()

    self.load_rcfile()

  ###
  ### EVENT HANDLERS
  ###

  def restart_wm(self, event, _):
    """Attempt to restart NoWM"""
    logging.info("Restarting...")
    os.execvp(sys.argv[0], sys.argv)

  def exit_wm(self, event, _):
    """Cleanly exit NoWM"""
    logging.info("Exiting...")
    sys.exit(0)

  def handle_terminal(self, event, _):
    """Launch terminal using x-terminal-emulator"""
    logging.debug(f"Starting terminal ({self.TERMINAL})...")
    if(os.fork() == 0):
        os.execvp(self.TERMINAL[0], self.TERMINAL)
        #os.system(f"sh -c 'time strace {self.TERMINAL[0]} > /tmp/t.log 2>&1'")
        #sys.exit(0)

  def handle_xeyes(self, event, _):
    """Launch xeyes TODO remove"""
    logging.debug(f"Starting xeyes...")
    if(os.fork() == 0):
        os.execvp("/usr/bin/xeyes", ["/usr/bin/xeyes"])
        #os.system(f"sh -c 'time strace /usr/bin/xeyes > /tmp/t.log 2>&1'")
        #sys.exit(0)

  def handle_browser(self, event, _):
    """Launch browser with xdg-open"""
    logging.debug(f"Starting browser ({self.BROWSER})...")
    if(os.fork() == 0):
        os.execvp(self.BROWSER[0], self.BROWSER)

  def handle_alttab(self, event, _):
    """Cycle through windows"""
    logging.debug(f"Handling alt-tab. current index {self.cycle_window_index}")
    logging.debug(f"windows: {[self.get_window_name(w) for w in self.window_order]}")
    window = self.window_order[self.cycle_window_index]
    self.raise_window(window)
    self.cycle_window_index = (self.cycle_window_index + 1) % len(self.window_order)
    logging.debug(f"new index: {self.cycle_window_index}")

  def handle_left(self, event, active_window):
    """Tile window left half of screen"""
    root_geometry = self.screen.root.get_geometry()
    self.move_window_and_resize(window=active_window, x=0, y=0, width=root_geometry.width/2, height=root_geometry.height)

  def handle_right(self, event, active_window):
    """Tile window right half of screen"""
    root_geometry = self.screen.root.get_geometry()
    self.move_window_and_resize(window=active_window, x=root_geometry.width / 2, y=0, width=root_geometry.width/2, height=root_geometry.height)

  def handle_topleft(self, event, active_window):
    """Tile window northwest quadrant of screen"""
    root_geometry = self.screen.root.get_geometry()
    self.move_window_and_resize(window=active_window, x=0, y=0, width=root_geometry.width/2, height=root_geometry.height/2)

  def handle_topright(self, event, active_window):
    """Tile window northeast quadrant of screen"""
    root_geometry = self.screen.root.get_geometry()
    self.move_window_and_resize(window=active_window, x=root_geometry.width/2, y=0, width=root_geometry.width/2, height=root_geometry.height/2)

  def handle_bottomleft(self, event, active_window):
    """Tile window southwest quadrant of screen"""
    root_geometry = self.screen.root.get_geometry()
    self.move_window_and_resize(window=active_window, x=0, y=root_geometry.height/2, width=root_geometry.width/2, height=root_geometry.height/2)

  def handle_bottomright(self, event, active_window):
    """Tile window southeast quadrant of screen"""
    root_geometry = self.screen.root.get_geometry()
    self.move_window_and_resize(window=active_window, x=root_geometry.width/2, y=root_geometry.height/2, width=root_geometry.width/2, height=root_geometry.height/2)

  def handle_return(self, event, active_window):
    """Maximize or un-maximize window"""
    root_geometry = self.screen.root.get_geometry()
    self.move_window_and_resize(window=active_window, x=0, y=0, width=root_geometry.width, height=root_geometry.height)

  def handle_up(self, event, active_window):
    """Tile window top half of screen"""
    root_geometry = self.screen.root.get_geometry()
    self.move_window_and_resize(window=active_window, x=0, y=0, width=root_geometry.width, height=root_geometry.height/2)

  def handle_down(self, event, active_window):
    """Tile window bottom half of screen"""
    root_geometry = self.screen.root.get_geometry()
    self.move_window_and_resize(window=active_window, x=0, y=root_geometry.height/2, width=root_geometry.width, height=root_geometry.height/2)

  def handle_wasd_up(self, event, active_window):
    """Move window up/Resize up"""
    geo = active_window.get_geometry()
    if event.state & X.Mod4Mask:
      # Resize
      self.move_window_and_resize(window=active_window, x=geo.x, y=geo.y, width=geo.width, height=geo.height-self.MOVE_RESIZE_PIXELS)
    else:
      # Move
      self.move_window_and_resize(window=active_window, x=geo.x, y=geo.y-self.MOVE_RESIZE_PIXELS, width=geo.width, height=geo.height)

  def handle_wasd_down(self, event, active_window):
    """Move window down/Resize down"""
    geo = active_window.get_geometry()
    if event.state & X.Mod4Mask:
      # Resize
      self.move_window_and_resize(window=active_window, x=geo.x, y=geo.y, width=geo.width, height=geo.height+self.MOVE_RESIZE_PIXELS)
    else:
      # Move
      self.move_window_and_resize(window=active_window, x=geo.x, y=geo.y+self.MOVE_RESIZE_PIXELS, width=geo.width, height=geo.height)

  def handle_wasd_left(self, event, active_window):
    """Move window left/Resize left"""
    geo = active_window.get_geometry()
    if event.state & X.Mod4Mask:
      # Resize
      self.move_window_and_resize(window=active_window, x=geo.x, y=geo.y, width=geo.width-self.MOVE_RESIZE_PIXELS, height=geo.height)
    else:
      # Move
      self.move_window_and_resize(window=active_window, x=geo.x-self.MOVE_RESIZE_PIXELS, y=geo.y, width=geo.width, height=geo.height)

  def handle_wasd_right(self, event, active_window):
    """Move window right/Resize right"""
    geo = active_window.get_geometry()
    if event.state & X.Mod4Mask:
      # Resize
      self.move_window_and_resize(window=active_window, x=geo.x, y=geo.y, width=geo.width+self.MOVE_RESIZE_PIXELS, height=geo.height)
    else:
      # Move
      self.move_window_and_resize(window=active_window, x=geo.x+self.MOVE_RESIZE_PIXELS, y=geo.y, width=geo.width, height=geo.height)

  def handle_kill_window(self, event, active_window):
    """Kill window, must be pressed twice"""
    if self.last_keysym == 53:
      logging.debug(f"handling ACTUAL kill window {event}")
      if active_window:
        active_window.destroy()
    else:
      logging.debug(f"handling FIRST (must press twice, got {self.last_keysym} wanted 53 kill window {event}")

     
  def sync(self):
    self.display.sync()

  def get_window_name(self, window):
    return window.get_wm_name()

  def get_focus(self):
    input_focus = self.display.get_input_focus().focus
    if self.is_root_window(input_focus):
      logging.debug("Asking for focus returned the root window")
      return None
    return input_focus


  def get_window_from_event(self, event):
    input_focus = self.get_focus()
    logging.debug(f"get_window_from_event focus={input_focus} event={event}")
    if hasattr(event, 'child') and event.child and not self.is_root_window(event.child):
      logging.debug(f"assuming we really want the child window from the event: {event}")
      return event.child
    if not self.is_root_window(event.window):
      logging.debug(f"assuming we really want the provided window from the event: {event}")
      return event.window
    if input_focus:
      logging.debug(f"assuming we really want the focus window {input_focus} from the event: {event}")
      return input_focus
    logging.warning(f"found no applicable window in the event: {event}")
    return None

  def is_root_child_window(self, window):
    """Is this window a child of root directly?"""
    return window in self.screen.root.query_tree().children

  def raise_window(self, window, warp_pointer=True):
    """Attempt to bring the window to the front, force map, warp the pointer to the center"""
    if not window or self.is_root_window(window):
      return
    window.map()
    window.set_input_focus(X.RevertToParent, 0)
    window.configure(stack_mode=X.Above)
    if warp_pointer:
      current_geometry = window.get_geometry()
      window.warp_pointer(int(current_geometry.x) + int(current_geometry.width/2),int(current_geometry.y) + int(current_geometry.height/2))
    self.sync()

  def move_window_and_resize(self, window, x, y, width=None, height=None, raise_window=True):
    """Move a window, optionally resize, optionally raise"""
    if not window:
      logging.warning("no window passed")
      return
    if self.is_root_window(window):
      logging.warning("attempt to move root window is a no go")
      return

    current_geometry = window.get_geometry()
    if not width:
      width = current_geometry.width
    if not height:
      height = current_geometry.height

    logging.debug(f"moving {self.get_window_name(window)} @ {current_geometry} to {x},{y},{width},{height}")
    window.configure(x=int(x), y=int(y), width=int(width), height=int(height))
    # Is this necessary?
    window.clear_area(x=int(x), y=int(y), width=int(width), height=int(height))
    if raise_window:
      self.raise_window(window)
    else:
      self.sync()

  ###
  ### SETUP
  ###

  def get_window_attributes(self, window):
    try:
      return window.get_attributes()
    except:
      return None

  def manage_window(self, window):
    """Start managing the window provided.  Raises the window, and registers for events"""
    logging.debug(f"Managing window: name={self.get_window_name(window)} {window}")
    if window and self.is_root_child_window(window):
      attrs = self.get_window_attributes(window)
      if not attrs:
        logging.debug(f"{window} has no attributes")
        return
      if attrs.override_redirect:
        logging.debug(f"{window} has override_redirect")
        return
      if window in self.windows:
        logging.debug(f"{window} is already managed ({self.windows})")

      self.windows[window] = {}
      self.window_order.append(window)
      self.raise_window(window)

      mask = X.EnterWindowMask | X.LeaveWindowMask
      window.change_attributes(event_mask=mask)
    else:
      logging.warning("No valid window provided or not a child of root...")


  def scan_windows(self):
    """Scan through the current mapped windows, adding them to the manage list"""
    self.windows.clear()
    self.window_order.clear()
    for child in self.screen.root.query_tree().children:
      if self.get_window_attributes(child).map_state:
        if child not in self.windows:
          self.manage_window(child)

  def configure_root_events(self):
    mask = (X.SubstructureRedirectMask | X.SubstructureNotifyMask | X.EnterWindowMask | X.LeaveWindowMask | X.FocusChangeMask)
    self.screen.root.change_attributes(event_mask=mask)

  def configure_key_handlers(self):
    # Key press handlers
    for modifier, keysym, handler_string in self.KEYPRESS_HANDLERS:
      keycode = self.display.keysym_to_keycode(keysym)
      func = getattr(self, handler_string, None)
      if func:
        logging.debug(f"mapping keypress {keycode} to {handler_string}/{func.__doc__}")
        self.keypress_handlers[keycode] = func
        self.screen.root.grab_key(keycode, modifier, True, X.GrabModeAsync, X.GrabModeAsync)

    # Key release handlers
    for modifier, keysym, handler_string in self.KEYRELEASE_HANDLERS:
      keycode = self.display.keysym_to_keycode(keysym)
      func = getattr(self, handler_string, None)
      if func:
        logging.debug(f"mapping keyrelease {keycode} to {handler_string}/{func.__doc__}")
        self.keyrelease_handlers[keycode] = func
        self.screen.root.grab_key(keycode, modifier, True, X.GrabModeAsync, X.GrabModeAsync)

  def handle_keypress(self, event):
    """Handle key press and dispatch to registered handler"""
    self.last_keysym = event.detail
    logging.debug(f"got keypress event: {self.last_keysym} {event}")
    func = self.keypress_handlers.get(event.detail, None)
    if func:
      window = self.get_window_from_event(event)
      func(event, window)
    #else:
    #  logging.debug(f"No keypress key_handler registered for {XK.keysym_to_string}")

  def handle_keyrelease(self, event):
    """Handle key depress and dispatch to registered handler"""
    logging.debug(f"got keyrelease event: {event}")
    func = self.keyrelease_handlers.get(event.detail, None)
    if func:
      func(event)
    #else:
    #  logging.debug(f"No keyrelease key_handler registered for {XK.keysym_to_string}")

  def handle_configurenotify(self, event):
    logging.debug(f"configurenotify: {event}")

  def handle_focusout(self, event):
    logging.debug(f"focusout: {event}")

  def is_root_window(self, window):
    if not window:
      return False
    if window.id == self.screen.root.id:
      logging.debug(f"window is root: {window} root={self.screen.root}")
      return True
    else:
      logging.debug(f"window is NOT root: {window} root={self.screen.root}")
      return False

  def handle_focusin(self, event):
    return

  def handle_enternotify(self, event):
    window = event.window
    if self.is_root_window(window):
      return
    logging.debug(f"enternotify: {event} {self.get_window_name(window)}")
    window.raise_window()
    window.set_input_focus(X.RevertToParent, 0)
    self.sync()

  def handle_leavenotify(self, event):
    logging.debug(f"leavenotify: {event}")

  def handle_maprequest(self, event):
    logging.debug(f"maprequest: {dir(event)} {event.__dict__} {self.get_window_name(event.window)} {self.get_window_name(event.parent)}")
    window = self.get_window_from_event(event)
    logging.debug(f"MAPREQUEST REAL WINDOW: window: {window}")
    window.map()


  def handle_mapnotify(self, event):
    logging.debug(f"mapnotify: {dir(event)} {event.__dict__} {self.get_window_name(event.window)}")
    window = self.get_window_from_event(event)
    logging.debug(f"MAPNOTIFY REAL WINDOW: window: {window}")
    if window:
      window.map()
      root_geometry = self.screen.root.get_geometry()
      self.manage_window(window)
      self.move_window_and_resize(window, x=root_geometry.width/4, y=root_geometry.height/4, width=root_geometry.width/2, height=root_geometry.height/2)
    else:
      logging.warning(f"maprequest: no event.window? {event}")

  def handle_configurerequest(self, event):
    """Event handler for ConfigureRequest events."""
    logging.debug(event)
    window = event.window
    x, y = event.x, event.y
    width, height = event.width, event.height
    mask = event.value_mask
    if mask == 0b1111:
      window.configure(x=x, y=y, width=width, height=height)
    elif mask == 0b1100:
      window.configure(width=width, height=height)
    elif mask == 0b0011:
      window.configure(x=x, y=y)
    elif mask == 0b01000000:
      window.configure(event.stack_mode)

  def unmanage_window(self, window):
    logging.debug(f"unmanaging window: {window}")
    if window in self.windows:
      del self.windows[window]
      self.window_order.remove(window)
    else:
      logging.warning(f"unmanage window for already unmanaged window: {window}")

  def handle_destroynotify(self, event):
    """Event handler for DestoryNotify events."""
    logging.debug(event)
    window = self.get_window_from_event(event)
    self.unmanage_window(window)

  def handle_unmapnotify(self, event):
    """Event handler for UnmapNotify events."""
    #logging.debug(event)
    #window = self.get_window_from_event(event)
    #self.unmanage_window(window)


  def handle_event(self, event):
    # TODO this should be a map lookup, or even just introspect the object?
    if event.type == X.KeyPress:
      self.handle_keypress(event)
    elif event.type == X.KeyRelease:
      self.handle_keyrelease(event)
    elif event.type == X.ConfigureNotify:
      self.handle_configurenotify(event)
    elif event.type == X.ConfigureRequest:
      self.handle_configurerequest(event)
    elif event.type == X.FocusIn:
      self.handle_focusin(event)
    elif event.type == X.FocusOut:
      self.handle_focusout(event)
    elif event.type == X.EnterNotify:
      self.handle_enternotify(event)
    elif event.type == X.LeaveNotify:
      self.handle_leavenotify(event)
    elif event.type == X.MapNotify:
      self.handle_mapnotify(event)
    elif event.type == X.MapRequest:
      self.handle_maprequest(event)
    elif event.type == X.ConfigureRequest:
      self.handle_configurerequest(event)
    elif event.type == X.DestroyNotify:
      self.handle_destroynotify(event)
    elif event.type == X.UnmapNotify:
      self.handle_unmapnotify(event)
    else:
      logging.debug(f"Unconfigured event: {event}")

  def load_rcfile(self):
    rcfile=os.path.expanduser("~/.nowmrc")
    try:
      with open(rcfile, "r") as f:
        rcexec = f.read()
    except:
      logging.info(f"No rc file read from {rcfile}")
      return

    try:
      exec(rcexec)
    except Exception as e:
      logging.fatal(f"exec {rcfile} failed:\n{e}")
      sys.exit(1)

  def main_loop(self):
    while True:
      self.handle_event(self.display.next_event())

if __name__ == "__main__":
  parser = argparse.ArgumentParser()
  parser.add_argument("--verbose", "-v", help="Be more verbose", action="store_true")
  parser.add_argument("--display", "-d", help="Explicitly set DISPLAY")
  args = parser.parse_args()
  if args.verbose:
    loglevel = "DEBUG"
  else:
    loglevel = "INFO"
  logging.basicConfig(level=loglevel, format=">>%(asctime)s:%(levelname)s:%(name)s:%(funcName)s:%(lineno)s>> %(msg)s")
  if args.display:
    os.environ["DISPLAY"] = args.display
  logging.info(f"starting {sys.argv[0]}")
  logging.debug(f"DISPLAY={os.getenv('DISPLAY', None)}")
  try:
    NoWM().main_loop()
  except KeyboardInterrupt:
    logging.info("Keyboard Interrupt, exiting...")
    sys.exit(0)
